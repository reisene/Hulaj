{"version":3,"file":"button-animation.js","sources":["modules/button-animation.js"],"sourcesContent":["// Stałe dla często używanych wartości, co zmniejsza ryzyko literówek\r\nconst STATES = {\r\n    SUBMIT: 'submit',\r\n    LOADING: 'loading',\r\n    SUCCESS: 'success',\r\n    ERROR: 'error'\r\n};\r\n\r\nconst ICONS = {\r\n    PAPER_PLANE: '.fa-paper-plane',\r\n    SPINNER: '.fa-spinner',\r\n    CHECK: '.fa-check',\r\n    TIMES: '.fa-times'\r\n};\r\n\r\n/**\r\n * Pokazuje wybraną ikonę w przycisku\r\n */\r\nfunction showIcon(button, iconSelector) {\r\n    const icon = button.querySelector(iconSelector);\r\n    if (icon) icon.classList.remove('hidden');\r\n}\r\n\r\n/**\r\n * Ukrywa wybraną ikonę w przycisku\r\n */\r\nfunction hideIcon(button, iconSelector) {\r\n    const icon = button.querySelector(iconSelector);\r\n    if (icon) icon.classList.add('hidden');\r\n}\r\n\r\n/**\r\n * Resetuje animację przycisku przez wymuszenie reflow\r\n */\r\nfunction resetButtonAnimation(button) {\r\n    button.style.animation = 'none';\r\n    button.offsetHeight; // Wymuszenie reflow\r\n    button.style.animation = '';\r\n}\r\n\r\n/**\r\n * Obsługuje stan ładowania przycisku\r\n */\r\nfunction handleLoadingState(button) {\r\n    button.classList.remove(STATES.SUBMIT);\r\n    button.classList.add(STATES.LOADING);\r\n    hideIcon(button, ICONS.PAPER_PLANE);\r\n    showIcon(button, ICONS.SPINNER);\r\n}\r\n\r\n/**\r\n * Obsługuje stan sukcesu lub błędu\r\n */\r\nfunction handleStatusState(button, type) {\r\n    if (type !== STATES.SUCCESS && type !== STATES.ERROR) return;\r\n    \r\n    button.classList.add(type);\r\n    resetButtonAnimation(button);\r\n    hideIcon(button, ICONS.SPINNER);\r\n    \r\n    const iconToShow = type === STATES.SUCCESS ? ICONS.CHECK : ICONS.TIMES;\r\n    showIcon(button, iconToShow);\r\n}\r\n\r\n/**\r\n * Resetuje wszystkie ikony w przycisku\r\n */\r\nfunction resetIcons(button) {\r\n    Object.values(ICONS).forEach(icon => hideIcon(button, icon));\r\n    const paperPlane = button.querySelector(ICONS.PAPER_PLANE);\r\n    if (paperPlane) {\r\n        paperPlane.setAttribute('class', 'svg-inline--fa fa-paper-plane');\r\n    }\r\n}\r\n\r\n/**\r\n * Zgłasza błąd do Sentry gdy przycisk nie istnieje\r\n */\r\nfunction reportButtonError() {\r\n    Sentry.captureException(new Error('formButton is null'), {\r\n        extra: {\r\n            url: window.location.href,\r\n            referrer: document.referrer,\r\n            userAgent: navigator.userAgent,\r\n            formName: 'kontakt',\r\n            formAction: window.location.href,\r\n            formMethod: 'POST',\r\n        },\r\n    });\r\n}\r\n\r\n/**\r\n * Inicjalizuje animacje dla przycisku formularza\r\n */\r\nfunction initButtonAnimation() {\r\n    const formButton = document.getElementById('my-form-button');\r\n    if (!formButton) {\r\n        reportButtonError();\r\n        return { animateButton: () => {}, resetButton: () => {} };\r\n    }\r\n\r\n    // Nasłuchiwanie zdarzeń\r\n    formButton.addEventListener('click', () => handleLoadingState(formButton));\r\n    formButton.addEventListener('transitionend', () => {\r\n        if (formButton.classList.contains(STATES.LOADING)) {\r\n            formButton.classList.remove(STATES.LOADING);\r\n        }\r\n    });\r\n\r\n    return {\r\n        animateButton: (type) => handleStatusState(formButton, type),\r\n        resetButton: () => {\r\n            formButton.classList.remove(STATES.LOADING, STATES.SUCCESS, STATES.ERROR);\r\n            formButton.classList.add(STATES.SUBMIT);\r\n            resetIcons(formButton);\r\n        }\r\n    };\r\n}\r\n\r\nexport default initButtonAnimation;"],"names":["STATES","SUBMIT","LOADING","SUCCESS","ERROR","ICONS","PAPER_PLANE","SPINNER","CHECK","TIMES","showIcon","button","iconSelector","icon","querySelector","classList","remove","hideIcon","add","resetButtonAnimation","style","animation","handleLoadingState","handleStatusState","type","resetIcons","Object","values","forEach","paperPlane","setAttribute","reportButtonError","Sentry","captureException","Error","extra","url","window","location","href","referrer","document","userAgent","navigator","formName","formAction","formMethod","initButtonAnimation","formButton","getElementById","addEventListener","contains","animateButton","resetButton"],"mappings":"AACA,IAAMA,OAAS,CACXC,OAAQ,SACRC,QAAS,UACTC,QAAS,UACTC,MAAO,OACX,EAEMC,MAAQ,CACVC,YAAa,kBACbC,QAAS,cACTC,MAAO,YACPC,MAAO,WACX,EAKA,SAASC,SAASC,EAAQC,GAChBC,EAAOF,EAAOG,cAAcF,CAAY,EAC1CC,GAAMA,EAAKE,UAAUC,OAAO,QAAQ,CAC5C,CAKA,SAASC,SAASN,EAAQC,GAChBC,EAAOF,EAAOG,cAAcF,CAAY,EAC1CC,GAAMA,EAAKE,UAAUG,IAAI,QAAQ,CACzC,CAKA,SAASC,qBAAqBR,GAC1BA,EAAOS,MAAMC,UAAY,OAEzBV,EAAOS,MAAMC,UAAY,EAC7B,CAKA,SAASC,mBAAmBX,GACxBA,EAAOI,UAAUC,OAAOhB,OAAOC,MAAM,EACrCU,EAAOI,UAAUG,IAAIlB,OAAOE,OAAO,EACnCe,SAASN,EAAQN,MAAMC,WAAW,EAClCI,SAASC,EAAQN,MAAME,OAAO,CAClC,CAKA,SAASgB,kBAAkBZ,EAAQa,GAC3BA,IAASxB,OAAOG,SAAWqB,IAASxB,OAAOI,QAE/CO,EAAOI,UAAUG,IAAIM,CAAI,EACzBL,qBAAqBR,CAAM,EAC3BM,SAASN,EAAQN,MAAME,OAAO,EAG9BG,SAASC,EADUa,IAASxB,OAAOG,QAAUE,MAAMG,MAAQH,MAAMI,KACtC,EAC/B,CAKA,SAASgB,WAAWd,GAChBe,OAAOC,OAAOtB,KAAK,EAAEuB,QAAQf,GAAQI,SAASN,EAAQE,CAAI,CAAC,EAC3D,IAAMgB,EAAalB,EAAOG,cAAcT,MAAMC,WAAW,EACrDuB,GACAA,EAAWC,aAAa,QAAS,+BAA+B,CAExE,CAKA,SAASC,oBACLC,OAAOC,iBAAiB,IAAIC,MAAM,oBAAoB,EAAG,CACrDC,MAAO,CACHC,IAAKC,OAAOC,SAASC,KACrBC,SAAUC,SAASD,SACnBE,UAAWC,UAAUD,UACrBE,SAAU,UACVC,WAAYR,OAAOC,SAASC,KAC5BO,WAAY,MAChB,CACJ,CAAC,CACL,CAKA,SAASC,sBACL,IAAMC,EAAaP,SAASQ,eAAe,gBAAgB,EAC3D,OAAKD,GAMLA,EAAWE,iBAAiB,QAAS,IAAM5B,mBAAmB0B,CAAU,CAAC,EACzEA,EAAWE,iBAAiB,gBAAiB,KACrCF,EAAWjC,UAAUoC,SAASnD,OAAOE,OAAO,GAC5C8C,EAAWjC,UAAUC,OAAOhB,OAAOE,OAAO,CAElD,CAAC,EAEM,CACHkD,cAAe,GAAU7B,kBAAkByB,EAAYxB,CAAI,EAC3D6B,YAAa,KACTL,EAAWjC,UAAUC,OAAOhB,OAAOE,QAASF,OAAOG,QAASH,OAAOI,KAAK,EACxE4C,EAAWjC,UAAUG,IAAIlB,OAAOC,MAAM,EACtCwB,WAAWuB,CAAU,CACzB,CACJ,IAnBIjB,kBAAkB,EACX,CAAEqB,cAAe,OAAUC,YAAa,MAAS,EAmBhE,gBAEeN"}