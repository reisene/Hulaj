{"version":3,"file":"button-animation.js","sources":["modules/button-animation.js"],"sourcesContent":["// Stałe dla często używanych wartości, co zmniejsza ryzyko literówek\nconst STATES = {\n    SUBMIT: 'submit',\n    LOADING: 'loading',\n    SUCCESS: 'success',\n    ERROR: 'error'\n};\n\nconst ICONS = {\n    PAPER_PLANE: '.fa-paper-plane',\n    SPINNER: '.fa-spinner',\n    CHECK: '.fa-check',\n    TIMES: '.fa-times'\n};\n\n/**\n * Shows the specified icon within the button\n * @param {HTMLElement} button - The button element containing the icon\n * @param {string} iconSelector - The CSS selector of the icon to show\n */\nfunction showIcon(button, iconSelector) {\n    const icon = button.querySelector(iconSelector);\n    if (icon) {\n        icon.classList.remove('hidden');\n    }\n}\n\n/**\n * Hides the specified icon within the button\n * @param {HTMLElement} button - The button element containing the icon\n * @param {string} iconClass - The CSS class of the icon to hide\n * Ukrywa wybraną ikonę w przycisku\n */\nfunction hideIcon(button, iconClass) {\n    const icon = button.querySelector(iconClass);\n    if (icon) {\n        icon.classList.add('hidden');\n    }\n}\n\n/**\n * Resetuje animację przycisku przez wymuszenie reflow\n */\nfunction resetButtonAnimation(button) {\n    button.style.animation = 'none';\n    void button.offsetHeight; // Wymuszenie reflow\n    button.style.animation = '';\n}\n\n/**\n * Obsługuje stan ładowania przycisku\n */\nfunction handleLoadingState(button) {\n    button.classList.remove(STATES.SUBMIT);\n    button.classList.add(STATES.LOADING);\n    hideIcon(button, ICONS.PAPER_PLANE);\n    showIcon(button, ICONS.SPINNER);\n}\n\n/**\n * Obsługuje stan sukcesu lub błędu\n */\nfunction handleStatusState(button, type) {\n    if (type !== STATES.SUCCESS && type !== STATES.ERROR) return;\n    \n    button.classList.add(type);\n    resetButtonAnimation(button);\n    hideIcon(button, ICONS.SPINNER);\n    \n    const iconToShow = type === STATES.SUCCESS ? ICONS.CHECK : ICONS.TIMES;\n    showIcon(button, iconToShow);\n}\n\n/**\n * Resetuje wszystkie ikony w przycisku\n */\nfunction resetIcons(button) {\n    Object.values(ICONS).forEach(icon => hideIcon(button, icon));\n    const paperPlane = button.querySelector(ICONS.PAPER_PLANE);\n    if (paperPlane) {\n        paperPlane.setAttribute('class', 'svg-inline--fa fa-paper-plane');\n    }\n}\n\n/**\n * Zgłasza błąd do Sentry gdy przycisk nie istnieje\n */\nfunction reportButtonError() {\n    Sentry.captureException(new Error('formButton is null'), {\n        extra: {\n            url: window.location.href,\n            referrer: document.referrer,\n            userAgent: navigator.userAgent,\n            formName: 'kontakt',\n            formAction: window.location.href,\n            formMethod: 'POST',\n        },\n    });\n}\n\n/**\n * Inicjalizuje animacje dla przycisku formularza\n */\nfunction initButtonAnimation() {\n    const formButton = document.getElementById('my-form-button');\n    if (!formButton) {\n        reportButtonError();\n        return { animateButton: () => {}, resetButton: () => {} };\n    }\n\n    // Nasłuchiwanie zdarzeń\n    formButton.addEventListener('click', () => handleLoadingState(formButton));\n    formButton.addEventListener('transitionend', () => {\n        if (formButton.classList.contains(STATES.LOADING)) {\n            formButton.classList.remove(STATES.LOADING);\n        }\n    });\n\n    return {\n        animateButton: (type) => handleStatusState(formButton, type),\n        resetButton: () => {\n            formButton.classList.remove(STATES.LOADING, STATES.SUCCESS, STATES.ERROR);\n            formButton.classList.add(STATES.SUBMIT);\n            resetIcons(formButton);\n        }\n    };\n}\n\nexport default initButtonAnimation;"],"names":["STATES","SUBMIT","LOADING","SUCCESS","ERROR","ICONS","PAPER_PLANE","SPINNER","CHECK","TIMES","showIcon","button","iconSelector","icon","querySelector","classList","remove","hideIcon","iconClass","add","resetButtonAnimation","style","animation","handleLoadingState","handleStatusState","type","resetIcons","Object","values","forEach","paperPlane","setAttribute","reportButtonError","Sentry","captureException","Error","extra","url","window","location","href","referrer","document","userAgent","navigator","formName","formAction","formMethod","initButtonAnimation","formButton","getElementById","addEventListener","contains","animateButton","resetButton"],"mappings":"AACA,IAAMA,OAAS,CACXC,OAAQ,SACRC,QAAS,UACTC,QAAS,UACTC,MAAO,OACX,EAEMC,MAAQ,CACVC,YAAa,kBACbC,QAAS,cACTC,MAAO,YACPC,MAAO,WACX,EAOA,SAASC,SAASC,EAAQC,GAChBC,EAAOF,EAAOG,cAAcF,CAAY,EAC1CC,GACAA,EAAKE,UAAUC,OAAO,QAAQ,CAEtC,CAQA,SAASC,SAASN,EAAQO,GAChBL,EAAOF,EAAOG,cAAcI,CAAS,EACvCL,GACAA,EAAKE,UAAUI,IAAI,QAAQ,CAEnC,CAKA,SAASC,qBAAqBT,GAC1BA,EAAOU,MAAMC,UAAY,OAEzBX,EAAOU,MAAMC,UAAY,EAC7B,CAKA,SAASC,mBAAmBZ,GACxBA,EAAOI,UAAUC,OAAOhB,OAAOC,MAAM,EACrCU,EAAOI,UAAUI,IAAInB,OAAOE,OAAO,EACnCe,SAASN,EAAQN,MAAMC,WAAW,EAClCI,SAASC,EAAQN,MAAME,OAAO,CAClC,CAKA,SAASiB,kBAAkBb,EAAQc,GAC3BA,IAASzB,OAAOG,SAAWsB,IAASzB,OAAOI,QAE/CO,EAAOI,UAAUI,IAAIM,CAAI,EACzBL,qBAAqBT,CAAM,EAC3BM,SAASN,EAAQN,MAAME,OAAO,EAG9BG,SAASC,EADUc,IAASzB,OAAOG,QAAUE,MAAMG,MAAQH,MAAMI,KACtC,EAC/B,CAKA,SAASiB,WAAWf,GAChBgB,OAAOC,OAAOvB,KAAK,EAAEwB,QAAQhB,GAAQI,SAASN,EAAQE,CAAI,CAAC,EAC3D,IAAMiB,EAAanB,EAAOG,cAAcT,MAAMC,WAAW,EACrDwB,GACAA,EAAWC,aAAa,QAAS,+BAA+B,CAExE,CAKA,SAASC,oBACLC,OAAOC,iBAAiB,IAAIC,MAAM,oBAAoB,EAAG,CACrDC,MAAO,CACHC,IAAKC,OAAOC,SAASC,KACrBC,SAAUC,SAASD,SACnBE,UAAWC,UAAUD,UACrBE,SAAU,UACVC,WAAYR,OAAOC,SAASC,KAC5BO,WAAY,MAChB,CACJ,CAAC,CACL,CAKA,SAASC,sBACL,IAAMC,EAAaP,SAASQ,eAAe,gBAAgB,EAC3D,OAAKD,GAMLA,EAAWE,iBAAiB,QAAS,IAAM5B,mBAAmB0B,CAAU,CAAC,EACzEA,EAAWE,iBAAiB,gBAAiB,KACrCF,EAAWlC,UAAUqC,SAASpD,OAAOE,OAAO,GAC5C+C,EAAWlC,UAAUC,OAAOhB,OAAOE,OAAO,CAElD,CAAC,EAEM,CACHmD,cAAe,GAAU7B,kBAAkByB,EAAYxB,CAAI,EAC3D6B,YAAa,KACTL,EAAWlC,UAAUC,OAAOhB,OAAOE,QAASF,OAAOG,QAASH,OAAOI,KAAK,EACxE6C,EAAWlC,UAAUI,IAAInB,OAAOC,MAAM,EACtCyB,WAAWuB,CAAU,CACzB,CACJ,IAnBIjB,kBAAkB,EACX,CAAEqB,cAAe,OAAUC,YAAa,MAAS,EAmBhE,gBAEeN"}