{"version":3,"file":"post-loader.js","sources":["modules/post-loader.js"],"sourcesContent":["/**\r\n * Loads blog posts from HTML files and enables sorting and searching.\r\n *\r\n * @param {string[]} postPaths - An array of paths to the blog post HTML files.\r\n * @param {jQuery} postsContainer - The container element for the posts.\r\n *\r\n * @returns {Promise} A promise that resolves with an array of post elements.\r\n */\r\nfunction loadPosts(postPaths, postsContainer) {\r\n    const postElements = Array(postPaths.length).fill(null);\r\n    let loadedPosts = 0;\r\n  \r\n    postPaths.forEach((postPath, index) => {\r\n      fetch(postPath)\r\n        .then(response => {\r\n          if (!response.ok) {\r\n            throw new Error(`Failed to load post: ${postPath}`);\r\n          }\r\n\r\n          return response.text();\r\n        })\r\n        .then(data => {\r\n          // Parse HTML data, extract post details, and create a post element.\r\n          const parser = new DOMParser();\r\n          const doc = parser.parseFromString(data, 'text/html');\r\n  \r\n          // Extract post details from the HTML\r\n          const title = $(doc).find('h2').text() || 'Brak tytułu'; // Użyj .text() zamiast .outerHTML\r\n          const date = $(doc).find('.post-date').text() || 'Data publikacji: Nieznana'; // Użyj .text()\r\n          const imageSrc = $(doc).find('img').attr('src'); // Użyj .attr() do uzyskania src\r\n          const image = imageSrc ? `<img src=\"${imageSrc}\" alt=\"Post Image\">` : '<p>Brak obrazka</p>'; // Upewnij się, że obrazek jest bezpieczny\r\n          const excerpt = $(doc).find('section p').first().text() || 'Brak treści'; // Użyj .text()\r\n  \r\n          // Create a post element\r\n          const postElement = $('<article class=\"post-article\">')\r\n            .append(`<h2>${title}</h2>`)\r\n            .append(`<p class=\"post-date\"><strong>Data publikacji:</strong> ${date}</p>`)\r\n            .append(image)\r\n            .append(`<div class=\"post-content\"><p>${excerpt}</p></div>`)\r\n            .append('<button class=\"read-more\">Czytaj więcej <i class=\"bi bi-file-earmark-post\"></i></button>');\r\n  \r\n          // Handle the \"Read More\" button click event\r\n          postElement.find('.read-more').on('click', function (e) {\r\n            // Listens for and handles a click event on the \".read-more\" element, performing\r\n            // several actions when triggered.\r\n            e.preventDefault();\r\n            postsContainer.html($(doc.body).html());\r\n            postsContainer.append('<button class=\"back-to-blog\">Powrót do bloga <i class=\"bi bi-arrow-counterclockwise\"></i></button>');\r\n            $('.back-to-blog').on('click', function () {\r\n              // Triggers on click events and reloads the current page.\r\n              location.reload();\r\n            });\r\n          });\r\n  \r\n          // Store the post element in the appropriate position in the array\r\n          postElements[index] = postElement;\r\n        })\r\n        .catch(error => {\r\n          // Catches and handles an error.\r\n          console.error('Error loading post:', error);\r\n          const errorElement = $('<article class=\"post-article\">').html(`<h2>Błąd</h2><p>Nie udało się załadować posta: ${postPath}</p>`);\r\n          postElements[index] = errorElement; // Zachowujemy błąd w odpowiednim miejscu w tablicy\r\n        })\r\n        .finally(() => {\r\n          // Increments and checks loadedPosts counter, then appends elements when loading is\r\n          // complete.\r\n          loadedPosts++;\r\n          if (loadedPosts === postPaths.length) {\r\n            // Append the post elements in reverse order to the container\r\n            postElements.reverse().forEach(element => postsContainer.append(element));\r\n          }\r\n        });\r\n    });\r\n  \r\n    return Promise.resolve(postElements);\r\n  }\r\n  \r\n  export default loadPosts;"],"names":["loadPosts","postPaths","postsContainer","postElements","Array","length","fill","loadedPosts","forEach","postPath","index","fetch","then","response","ok","text","Error","data","doc","DOMParser","parseFromString","title","$","find","date","imageSrc","attr","image","excerpt","first","postElement","append","on","e","preventDefault","html","body","location","reload","catch","error","console","errorElement","finally","reverse","element","Promise","resolve"],"mappings":"AAQA,SAASA,UAAUC,EAAWC,GAC1B,IAAMC,EAAeC,MAAMH,EAAUI,MAAM,EAAEC,KAAK,IAAI,EAClDC,EAAc,EAgElB,OA9DAN,EAAUO,QAAQ,CAACC,EAAUC,KAC3BC,MAAMF,CAAQ,EACXG,KAAKC,IACJ,GAAKA,EAASC,GAId,OAAOD,EAASE,KAAK,EAHnB,MAAM,IAAIC,MAAM,wBAAwBP,CAAU,CAItD,CAAC,EACAG,KAAKK,IAGJ,IAAMC,GADS,IAAIC,WACAC,gBAAgBH,EAAM,WAAW,EAGpD,IAAMI,EAAQC,EAAEJ,CAAG,EAAEK,KAAK,IAAI,EAAER,KAAK,GAAK,cACpCS,EAAOF,EAAEJ,CAAG,EAAEK,KAAK,YAAY,EAAER,KAAK,GAAK,4BAC3CU,EAAWH,EAAEJ,CAAG,EAAEK,KAAK,KAAK,EAAEG,KAAK,KAAK,EACxCC,EAAQF,eAAwBA,uBAAgC,sBAChEG,EAAUN,EAAEJ,CAAG,EAAEK,KAAK,WAAW,EAAEM,MAAM,EAAEd,KAAK,GAAK,cAGrDe,EAAcR,EAAE,gCAAgC,EACnDS,cAAcV,QAAY,EAC1BU,iEAAiEP,OAAU,EAC3EO,OAAOJ,CAAK,EACZI,uCAAuCH,aAAmB,EAC1DG,OAAO,0FAA0F,EAGpGD,EAAYP,KAAK,YAAY,EAAES,GAAG,QAAS,SAAUC,GAGnDA,EAAEC,eAAe,EACjBhC,EAAeiC,KAAKb,EAAEJ,EAAIkB,IAAI,EAAED,KAAK,CAAC,EACtCjC,EAAe6B,OAAO,oGAAoG,EAC1HT,EAAE,eAAe,EAAEU,GAAG,QAAS,WAE7BK,SAASC,OAAO,CAClB,CAAC,CACH,CAAC,EAGDnC,EAAaO,GAASoB,CACxB,CAAC,EACAS,MAAMC,IAELC,QAAQD,MAAM,sBAAuBA,CAAK,EACpCE,EAAepB,EAAE,gCAAgC,EAAEa,uDAAuD1B,OAAc,EAC9HN,EAAaO,GAASgC,CACxB,CAAC,EACAC,QAAQ,KAGPpC,EAAAA,IACoBN,EAAUI,QAE5BF,EAAayC,QAAQ,EAAEpC,QAAQqC,GAAW3C,EAAe6B,OAAOc,CAAO,CAAC,CAE5E,CAAC,CACL,CAAC,EAEMC,QAAQC,QAAQ5C,CAAY,CACrC,gBAEeH"}