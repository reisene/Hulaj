{"version":3,"file":"post-loader.js","names":["loadPosts","postPaths","postsContainer","postElements","Array","length","fill","loadedPosts","forEach","postPath","index","fetch","then","response","ok","Error","concat","text","data","parser","DOMParser","doc","parseFromString","title","$","find","prop","date","image","excerpt","first","postElement","html","on","e","preventDefault","body","append","location","reload","error","console","errorElement","reverse","element","Promise","resolve","_default","exports"],"sources":["modules/post-loader.js"],"sourcesContent":["/**\n * Loads blog posts from HTML files and enables sorting and searching.\n *\n * @param {string[]} postPaths - An array of paths to the blog post HTML files.\n * @param {jQuery} postsContainer - The container element for the posts.\n *\n * @returns {Promise} A promise that resolves with an array of post elements.\n */\nfunction loadPosts(postPaths, postsContainer) {\n    const postElements = Array(postPaths.length).fill(null);\n    let loadedPosts = 0;\n  \n    postPaths.forEach((postPath, index) => {\n      fetch(postPath)\n        .then(response => {\n          if (!response.ok) {\n            throw new Error(`Failed to load post: ${postPath}`);\n          }\n\n          return response.text();\n        })\n        .then(data => {\n          // Parse HTML data, extract post details, and create a post element.\n          const parser = new DOMParser();\n          const doc = parser.parseFromString(data, 'text/html');\n  \n          // Extract post details from the HTML\n          const title = $(doc).find('h2').prop('outerHTML') || '<h2>Brak tytułu</h2>';\n          const date = $(doc).find('.post-date').prop('outerHTML') || '<p class=\"post-date\"><strong>Data publikacji:</strong> Nieznana</p>';\n          const image = $(doc).find('img').prop('outerHTML') || '<p>Brak obrazka</p>';\n          const excerpt = $(doc).find('section p').first().prop('outerHTML') || '<p>Brak treści</p>';\n  \n          // Create a post element\n          const postElement = $('<article class=\"post-article\">').html(`${title}${date}${image}<div class=\"post-content\">${excerpt}</div><button class=\"read-more\">Czytaj więcej <i class=\"bi bi-file-earmark-post\"></i></button>`);\n  \n          // Handle the \"Read More\" button click event\n          postElement.find('.read-more').on('click', function (e) {\n            // Listens for and handles a click event on the \".read-more\" element, performing\n            // several actions when triggered.\n            e.preventDefault();\n            postsContainer.html($(doc.body).html());\n            postsContainer.append('<button class=\"back-to-blog\">Powrót do bloga <i class=\"bi bi-arrow-counterclockwise\"></i></button>');\n            $('.back-to-blog').on('click', function () {\n              // Triggers on click events and reloads the current page.\n              location.reload();\n            });\n          });\n  \n          // Store the post element in the appropriate position in the array\n          postElements[index] = postElement;\n        })\n        .catch(error => {\n          // Catches and handles an error.\n          console.error('Error loading post:', error);\n          const errorElement = $('<article class=\"post-article\">').html(`<h2>Błąd</h2><p>Nie udało się załadować posta: ${postPath}</p>`);\n          postElements[index] = errorElement; // Zachowujemy błąd w odpowiednim miejscu w tablicy\n        })\n        .finally(() => {\n          // Increments and checks loadedPosts counter, then appends elements when loading is\n          // complete.\n          loadedPosts++;\n          if (loadedPosts === postPaths.length) {\n            // Append the post elements in reverse order to the container\n            postElements.reverse().forEach(element => postsContainer.append(element));\n          }\n        });\n    });\n  \n    return Promise.resolve(postElements);\n  }\n  \n  export default loadPosts;"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,SAASA,CAACC,SAAS,EAAEC,cAAc,EAAE;EAC1C,IAAMC,YAAY,GAAGC,KAAK,CAACH,SAAS,CAACI,MAAM,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC;EACvD,IAAIC,WAAW,GAAG,CAAC;EAEnBN,SAAS,CAACO,OAAO,CAAC,UAACC,QAAQ,EAAEC,KAAK,EAAK;IACrCC,KAAK,CAACF,QAAQ,CAAC,CACZG,IAAI,CAAC,UAAAC,QAAQ,EAAI;MAChB,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,yBAAAC,MAAA,CAAyBP,QAAQ,CAAE,CAAC;MACrD;MAEA,OAAOI,QAAQ,CAACI,IAAI,CAAC,CAAC;IACxB,CAAC,CAAC,CACDL,IAAI,CAAC,UAAAM,IAAI,EAAI;MACZ;MACA,IAAMC,MAAM,GAAG,IAAIC,SAAS,CAAC,CAAC;MAC9B,IAAMC,GAAG,GAAGF,MAAM,CAACG,eAAe,CAACJ,IAAI,EAAE,WAAW,CAAC;;MAErD;MACA,IAAMK,KAAK,GAAGC,CAAC,CAACH,GAAG,CAAC,CAACI,IAAI,CAAC,IAAI,CAAC,CAACC,IAAI,CAAC,WAAW,CAAC,IAAI,sBAAsB;MAC3E,IAAMC,IAAI,GAAGH,CAAC,CAACH,GAAG,CAAC,CAACI,IAAI,CAAC,YAAY,CAAC,CAACC,IAAI,CAAC,WAAW,CAAC,IAAI,qEAAqE;MACjI,IAAME,KAAK,GAAGJ,CAAC,CAACH,GAAG,CAAC,CAACI,IAAI,CAAC,KAAK,CAAC,CAACC,IAAI,CAAC,WAAW,CAAC,IAAI,qBAAqB;MAC3E,IAAMG,OAAO,GAAGL,CAAC,CAACH,GAAG,CAAC,CAACI,IAAI,CAAC,WAAW,CAAC,CAACK,KAAK,CAAC,CAAC,CAACJ,IAAI,CAAC,WAAW,CAAC,IAAI,oBAAoB;;MAE1F;MACA,IAAMK,WAAW,GAAGP,CAAC,CAAC,gCAAgC,CAAC,CAACQ,IAAI,IAAAhB,MAAA,CAAIO,KAAK,EAAAP,MAAA,CAAGW,IAAI,EAAAX,MAAA,CAAGY,KAAK,kCAAAZ,MAAA,CAA6Ba,OAAO,4GAAgG,CAAC;;MAEzN;MACAE,WAAW,CAACN,IAAI,CAAC,YAAY,CAAC,CAACQ,EAAE,CAAC,OAAO,EAAE,UAAUC,CAAC,EAAE;QACtD;QACA;QACAA,CAAC,CAACC,cAAc,CAAC,CAAC;QAClBjC,cAAc,CAAC8B,IAAI,CAACR,CAAC,CAACH,GAAG,CAACe,IAAI,CAAC,CAACJ,IAAI,CAAC,CAAC,CAAC;QACvC9B,cAAc,CAACmC,MAAM,CAAC,oGAAoG,CAAC;QAC3Hb,CAAC,CAAC,eAAe,CAAC,CAACS,EAAE,CAAC,OAAO,EAAE,YAAY;UACzC;UACAK,QAAQ,CAACC,MAAM,CAAC,CAAC;QACnB,CAAC,CAAC;MACJ,CAAC,CAAC;;MAEF;MACApC,YAAY,CAACO,KAAK,CAAC,GAAGqB,WAAW;IACnC,CAAC,CAAC,SACI,CAAC,UAAAS,KAAK,EAAI;MACd;MACAC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;MAC3C,IAAME,YAAY,GAAGlB,CAAC,CAAC,gCAAgC,CAAC,CAACQ,IAAI,iFAAAhB,MAAA,CAAmDP,QAAQ,SAAM,CAAC;MAC/HN,YAAY,CAACO,KAAK,CAAC,GAAGgC,YAAY,CAAC,CAAC;IACtC,CAAC,CAAC,WACM,CAAC,YAAM;MACb;MACA;MACAnC,WAAW,EAAE;MACb,IAAIA,WAAW,KAAKN,SAAS,CAACI,MAAM,EAAE;QACpC;QACAF,YAAY,CAACwC,OAAO,CAAC,CAAC,CAACnC,OAAO,CAAC,UAAAoC,OAAO;UAAA,OAAI1C,cAAc,CAACmC,MAAM,CAACO,OAAO,CAAC;QAAA,EAAC;MAC3E;IACF,CAAC,CAAC;EACN,CAAC,CAAC;EAEF,OAAOC,OAAO,CAACC,OAAO,CAAC3C,YAAY,CAAC;AACtC;AAAC,IAAA4C,QAAA,GAAAC,OAAA,cAEchD,SAAS","ignoreList":[]}