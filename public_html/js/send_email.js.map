{"version":3,"file":"send_email.js","sources":["send_email.js"],"sourcesContent":["/**\r\n * Handles form submission, validates input, and sends data to the server using AJAX.\r\n *\r\n * @param {Event} event - The submit event triggered by the form.\r\n * @param {string} token - The reCAPTCHA token obtained after user interaction.\r\n * @returns {void}\r\n */\r\nimport displayNotification from './modules/notification.js';\r\nimport phoneFormatter from './modules/phone-format.js';\r\nimport initButtonAnimation from './modules/button-animation.js';\r\n\r\nconst form = document.getElementById(\"my-form\");\r\n\r\nconst init = initButtonAnimation();\r\n\r\n\r\n/**\r\n * Generates a CSRF token and stores it in local storage.\r\n *\r\n * This function fetches a CSRF token from the server, saves it in the local storage,\r\n * and populates a hidden input field in the form with the token. In case of an error\r\n * during the fetch operation, it logs the error and captures it using Sentry.\r\n *\r\n * @function generateCsfrToken\r\n * @returns {void} This function does not return a value.\r\n * @throws {Error} Throws an error if the fetch operation fails.\r\n */\r\nfunction generateCsfrToken() {\r\n  // Pobierz token z serwera\r\n  return fetch('/php/generate-token.php')\r\n    .then(response => {\r\n      if (!response.ok) {\r\n        throw new Error('Network response was not ok');\r\n      }\r\n      return response.text();\r\n    })\r\n    .then(csrfToken => {\r\n      // Zapisz token w lokalnym storage\r\n      localStorage.setItem('csrf_token', csrfToken);\r\n      // Dodaj token do formularza\r\n      document.getElementById('csrf-token').value = csrfToken;\r\n    })\r\n    .catch(error => {\r\n      const errorData = {\r\n        message: 'Błąd pobierania tokena',\r\n        url: '/php/generate-token.php',\r\n        method: 'GET',\r\n      };\r\n      Sentry.captureException(new Error(errorData.message), {\r\n        extra: errorData,\r\n      });\r\n    });\r\n}\r\n\r\n/**\r\n * Verifies the CSRF token by comparing tokens stored in local storage and the form.\r\n * \r\n * This function invokes `generateCsfrToken` to ensure a valid CSRF token is fetched\r\n * and stored in local storage. It then compares the stored token with the token \r\n * present in the form's hidden input field. If the tokens do not match, it recursively \r\n * calls itself to retry the token verification process.\r\n * \r\n * @function checkCsrfToken\r\n * @returns {Promise<void>} A promise that resolves once the token verification is complete.\r\n * @throws {Error} If the token generation or storage process fails.\r\n */\r\nfunction checkCsrfToken() {\r\n  return generateCsfrToken().then(() => { // Czekaj na zakończenie generateCsfrToken\r\n      const storedToken = localStorage.getItem('csrf_token');\r\n      const formToken = document.getElementById('csrf-token').value;\r\n\r\n      if (storedToken !== formToken) {\r\n          // Tokeny są różne, wywołaj funkcję ponownie\r\n          return checkCsrfToken();\r\n      }\r\n  });\r\n}\r\n\r\n/**\r\n * Initializes event listeners for the DOMContentLoaded event and calls necessary functions.\r\n *\r\n * This function attaches an event listener to the DOMContentLoaded event, which triggers when\r\n * the initial HTML document has been completely loaded and parsed, without waiting for stylesheets,\r\n * images, and subframes to finish loading. It retrieves the phone input element, adds an input\r\n * event listener to it, calls the generateCsfrToken function, and finally calls the phoneFormatter\r\n * function.\r\n *\r\n * @returns {void} This function does not return a value.\r\n */\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n  const phoneInput = document.getElementById('phone');\r\n  phoneInput.addEventListener('input', phoneFormatter);\r\n  checkCsrfToken();\r\n  phoneFormatter();\r\n});\r\n\r\n\r\n\r\n/**\r\n * @description Processes a form submission, validating user input and sending it to\r\n * a PHP script via an AJAX request. It also displays notifications, resets the form\r\n * after success, and re-enables the submit button upon completion or failure.\r\n *\r\n * @param {Event} event - Used to prevent default form submission behavior.\r\n *\r\n * @param {string} token - Used to authenticate reCAPTCHA responses.\r\n */\r\nasync function handleSubmit(event, token) {\r\n  event.preventDefault();\r\n  // Check if form exists before continuing\r\n  if (!form) {\r\n    console.error(\"Form not found.\");\r\n    Sentry.captureException(error, {\r\n      extra: {\r\n        url: window.location.href,\r\n        referrer: document.referrer,\r\n        userAgent: navigator.userAgent,\r\n        formName: 'kontakt',\r\n        formAction: window.location.href,\r\n        formMethod: 'POST',\r\n      },\r\n    });\r\n    return;\r\n  }\r\n  \r\n  // Get form data\r\n  const formData = getFormData();\r\n\r\n  const submitButton = form.querySelector('button[type=\"submit\"]');\r\n  if (submitButton) {\r\n      submitButton.disabled = true;\r\n  } else {\r\n    console.error(\"Submit button not found.\");\r\n    return; // Zatrzymaj dalsze przetwarzanie, jeśli przycisk nie został znaleziony\r\n  }\r\n\r\n  try {\r\n    await validateFormData(submitButton, formData);\r\n  } catch (error) {\r\n    console.error(error);\r\n    return;\r\n  }\r\n\r\n  const data = prepareData(formData, token);\r\n\r\n  const file = new File([JSON.stringify(formData)], 'form_data.txt', {\r\n    type: 'text/plain',\r\n  });\r\n\r\n  await sendDataToServer(submitButton, data, file);\r\n}\r\n\r\nfunction getFormData() {\r\n  return {\r\n      email: document.getElementById(\"email\").value,\r\n      phone: document.getElementById(\"phone\").value.replace(/\\D/g, ''),\r\n      name: document.getElementById(\"name\").value,\r\n      message: document.getElementById(\"message\").value\r\n  };\r\n}\r\n\r\n/**\r\n * Prepares form data to be sent to the server.\r\n *\r\n * @param {Object} formData - Form data obtained from the user.\r\n * @param {string} token - reCAPTCHA token obtained after successful verification.\r\n * @returns {FormData} Prepared form data to be sent to the server.\r\n */\r\nfunction prepareData(formData, token) {\r\n  // Generate a unique ID for the form submission\r\n  const uniqueID = `${Date.now()}${Math.floor(Math.random() * 1000000).toString(36)}`;\r\n\r\n  // Get the CSRF token from the hidden input field\r\n  const csrfToken = document.getElementById('csrf-token').value;\r\n\r\n  // Create a new FormData object to store the form data\r\n  const data = new FormData();\r\n\r\n  // Append the form data to the FormData object\r\n  data.append('name', formData.name);\r\n  data.append('email', formData.email);\r\n  data.append('phone', formData.phone);\r\n  data.append('message', formData.message);\r\n\r\n  // Append the reCAPTCHA token and unique ID to the FormData object\r\n  data.append('g-recaptcha-response', token);\r\n  data.append('uniqueID', uniqueID);\r\n\r\n  // Append the CSRF token to the FormData object\r\n  data.append('csrf_token', csrfToken);\r\n\r\n  return data;\r\n}\r\nfunction executeReCAPTCHA(event, siteKey) {\r\n  grecaptcha.ready(() => {\r\n    grecaptcha.execute(siteKey, { action: 'submit' })\r\n      .then((token) => {\r\n        if (token) {\r\n          handleSubmit(event, token);\r\n        } else {\r\n          displayNotification(\"ReCAPTCHA verification failed. Please try again.\", 'error');\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"ReCAPTCHA error:\", error);\r\n        displayNotification(\"ReCAPTCHA verification failed. Please try again.\", 'error');\r\n      });\r\n  });\r\n}\r\n\r\n// Użycie funkcji w kontekście formularza\r\nform.addEventListener(\"submit\", (event) => {\r\n  event.preventDefault();\r\n  fetch('../config.json')\r\n    .then(response => response.text())\r\n    .then(jsonString => {\r\n      const config = JSON.parse(jsonString);\r\n      executeReCAPTCHA(event, config.recaptchaSiteKey); // Wywołanie wydzielonej funkcji\r\n    })\r\n    .catch(error => {\r\n      console.error('Error loading config:', error);\r\n    });\r\n});\r\n\r\n\r\n\r\n/**\r\n * Validates form data before sending it to the server.\r\n *\r\n * @param {Object} formData - Object containing form data.\r\n *\r\n * @returns {boolean} - Returns true if form data is valid, false otherwise.\r\n */\r\nasync function validateFormData(submitButton, formData) {\r\n  try {\r\n    const response = await fetch('../php/validate-data.php', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(formData)\r\n    });\r\n\r\n    const data = await response.json();\r\n\r\n    if (data.error) {\r\n      // Wyświetl błąd na stronie\r\n      displayNotification(data.error, 'error');\r\n      setTimeout(() => {\r\n        init.resetButton();\r\n      }, 200);\r\n      throw new Error(data.error); // Rzuć wyjątek w przypadku błędu walidacji\r\n    } else {\r\n      // Dane formularza są prawidłowe, możesz kontynuować\r\n      return true; // Kontynuuj proces\r\n    }\r\n  } catch (error) {\r\n    submitButton.disabled = false;\r\n    throw error; // Rzuć wyjątek w przypadku błędu\r\n  }\r\n}\r\n\r\n/**\r\n * @description Sends form data to a PHP script using the Fetch API. It processes\r\n * the response, displaying notifications based on the result. It also resets the\r\n * form after success, re-enables the submit button upon completion, and handles\r\n * errors gracefully.\r\n *\r\n * @param {HTMLElement} submitButton - The form's submit button element.\r\n * @param {FormData} data - An object containing form data to be sent to the server.\r\n * @returns {Promise<void>}\r\n */\r\n\r\nasync function sendDataToServer(submitButton, data, file) {\r\n  try {\r\n    const response = await fetch('../php/send_email.php', {\r\n      method: 'POST',\r\n      body: data,\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`Błąd ${response.status}: ${response.statusText}`);\r\n    }\r\n\r\n    const result = await response.json();\r\n  \r\n    if (result.success) {\r\n      displayNotification(result.message, 'success');\r\n      setTimeout(() => {\r\n        // Calls animateButton with 'success'.\r\n        init.animateButton('success');\r\n      }, 0);\r\n      setTimeout(() => {\r\n        // Calls form.reset() with a delay.\r\n        form.reset(); // Reset the form after success\r\n      }, 5000); // Delaying reset after success message\r\n    } else {\r\n      displayNotification(result.message, 'error');\r\n      setTimeout(() => {\r\n        // Immediately invokes itself.\r\n        init.animateButton('error');\r\n      }, 0);\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Form submission error:\", error.message, error.stack);\r\n    handleError(file, error);\r\n  } finally {\r\n    // Re-enable the submit button\r\n    submitButton.disabled = false;\r\n    setTimeout(() => {\r\n      // Calls `resetButton` after 5 seconds delay.\r\n      init.resetButton();\r\n    }, 5000);\r\n  }\r\n}\r\n\r\n/**\r\n * Captures and handles errors by reporting them to Sentry and notifying the user.\r\n *\r\n * This function utilizes Sentry's `captureException` to log the provided error along with \r\n * additional context, such as form data and specific tags. It also displays a user-friendly \r\n * error message to inform the user of the encountered issue.\r\n *\r\n * @param {Error} error - The error object to be captured and reported.\r\n * @param {Object} data - The form data associated with the error (should be defined in the scope).\r\n * @param {Object} [options] - Optional parameters for additional context.\r\n * @param {string} options.formName - The name of the form where the error occurred, used for tagging.\r\n * \r\n * @tags {Object} tags - Tags to categorize the error.\r\n * @tags.form-name {string} 'kontakt' - The name of the form that triggered the error, aiding in filtering and analysis.\r\n */\r\nfunction handleError(file, error) {\r\n  Sentry.captureException(error, {\r\n    attachments: [\r\n      {\r\n        filename: 'form_data.txt',\r\n        data: file,\r\n        contentType: 'text/plain',\r\n      },\r\n    ],  \r\n    tags: {\r\n      'form-name': 'kontakt',\r\n    },\r\n    extra: {\r\n      url: window.location.href,\r\n      referrer: document.referrer,\r\n      userAgent: navigator.userAgent,\r\n      formData: file,\r\n      formMethod: 'POST',\r\n      formAction: '../php/send_email.php',\r\n      formError: error.message,\r\n      formErrorStack: error.stack,\r\n      formErrorName: error.name,\r\n      formErrorMessage: error.message,\r\n    },\r\n  });\r\n if (error.message.includes('Błąd')) {\r\n    displayNotification('Wystąpił błąd. Proszę spróbować ponownie.', 'error');\r\n  } else {\r\n    displayNotification('Wystąpił nieoczekiwany błąd. Proszę skontaktować się z administratorem.', 'error');\r\n  }\r\n}\r\n"],"names":["displayNotification","phoneFormatter","initButtonAnimation","form","document","getElementById","init","generateCsfrToken","fetch","then","response","ok","text","Error","csrfToken","localStorage","setItem","value","catch","error","errorData","message","url","method","Sentry","captureException","extra","checkCsrfToken","getItem","async","handleSubmit","event","token","preventDefault","formData","getFormData","submitButton","querySelector","disabled","await","validateFormData","console","sendDataToServer","prepareData","File","JSON","stringify","type","window","location","href","referrer","userAgent","navigator","formName","formAction","formMethod","email","phone","replace","name","uniqueID","Date","now","Math","floor","random","toString","data","FormData","append","executeReCAPTCHA","siteKey","grecaptcha","ready","execute","action","headers","Content-Type","body","json","setTimeout","resetButton","file","status","statusText","result","success","animateButton","reset","stack","handleError","attachments","filename","contentType","tags","form-name","formError","formErrorStack","formErrorName","formErrorMessage","includes","addEventListener","jsonString","config","parse","recaptchaSiteKey"],"mappings":"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"}