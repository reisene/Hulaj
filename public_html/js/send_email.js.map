{"version":3,"file":"send_email.js","sources":["send_email.js"],"sourcesContent":["/**\n * Handles form submission, validates input, and sends data to the server using AJAX.\n *\n * @param {Event} event - The submit event triggered by the form.\n * @param {string} token - The reCAPTCHA token obtained after user interaction.\n * @returns {void}\n */\nimport displayNotification from './modules/notification.js';\nimport phoneFormatter from './modules/phone-format.js';\nimport initButtonAnimation from './modules/button-animation.js';\n\nconst form = document.getElementById(\"my-form\");\n\nconst init = initButtonAnimation();\n\n\n/**\n * Generates a CSRF token and stores it in local storage.\n *\n * This function fetches a CSRF token from the server, saves it in the local storage,\n * and populates a hidden input field in the form with the token. In case of an error\n * during the fetch operation, it logs the error and captures it using Sentry.\n *\n * @function generateCsfrToken\n * @returns {void} This function does not return a value.\n * @throws {Error} Throws an error if the fetch operation fails.\n */\nfunction generateCsfrToken() {\n  // Pobierz token z serwera\n  fetch('/php/generate-token.php')\n    .then(response => response.text())\n    .then(csrfToken => {\n      // Zapisz token w lokalnym storage\n      localStorage.setItem('csrf_token', csrfToken);\n      // Dodaj token do formularza\n      document.getElementById('csrf-token').value = csrfToken;\n    })\n    .catch(error => {\n      const errorData = {\n        message: 'Błąd pobierania tokena',\n        url: '/php/generate-token.php',\n        method: 'GET',\n      };\n      Sentry.captureException(new Error(errorData.message), {\n        extra: errorData,\n      });\n      console.error('Błąd pobierania tokena:', error)\n    });\n}\n\n\n/**\n * Initializes event listeners for the DOMContentLoaded event and calls necessary functions.\n *\n * This function attaches an event listener to the DOMContentLoaded event, which triggers when\n * the initial HTML document has been completely loaded and parsed, without waiting for stylesheets,\n * images, and subframes to finish loading. It retrieves the phone input element, adds an input\n * event listener to it, calls the generateCsfrToken function, and finally calls the phoneFormatter\n * function.\n *\n * @returns {void} This function does not return a value.\n */\ndocument.addEventListener('DOMContentLoaded', () => {\n  const phoneInput = document.getElementById('phone');\n  phoneInput.addEventListener('input', phoneFormatter);\n  generateCsfrToken();\n  phoneFormatter();\n});\n\n\n\n/**\n * @description Processes a form submission, validating user input and sending it to\n * a PHP script via an AJAX request. It also displays notifications, resets the form\n * after success, and re-enables the submit button upon completion or failure.\n *\n * @param {Event} event - Used to prevent default form submission behavior.\n *\n * @param {string} token - Used to authenticate reCAPTCHA responses.\n */\nasync function handleSubmit(event, token) {\n  event.preventDefault();\n  // Check if form exists before continuing\n  if (!form) {\n    console.error(\"Form not found.\");\n    Sentry.captureException(error, {\n      extra: {\n        url: window.location.href,\n        referrer: document.referrer,\n        userAgent: navigator.userAgent,\n        formName: 'kontakt',\n        formAction: window.location.href,\n        formMethod: 'POST',\n      },\n    });\n    return;\n  }\n  \n  // Get form data\n  const formData = {\n    email: document.getElementById(\"email\").value,\n    phone: document.getElementById(\"phone\").value.replace(/\\D/g, ''),\n    name: document.getElementById(\"name\").value,\n    message: document.getElementById(\"message\").value\n  };\n\n  const submitButton = form.querySelector('button[type=\"submit\"]');\n  if (submitButton) {\n      submitButton.disabled = true;\n  } else {\n    console.error(\"Submit button not found.\");\n    return; // Zatrzymaj dalsze przetwarzanie, jeśli przycisk nie został znaleziony\n  }\n\n  try {\n    await validateFormData(submitButton, formData);\n  } catch (error) {\n    console.error(error);\n    return;\n  }\n\n  const uniqueID = `${Date.now()}${Math.floor(Math.random() * 1000000).toString(36)}`;\n\n  const csrfToken = document.getElementById('csrf-token').value;\n\n  // Prepare data for sending\n  const data = new FormData();\n  data.append('name', formData.name);\n  data.append('email', formData.email);\n  data.append('phone', formData.phone);\n  data.append('message', formData.message);\n  data.append('g-recaptcha-response', token);\n  data.append('uniqueID', uniqueID);\n  data.append('csrf_token', csrfToken);\n\n  const file = new File([JSON.stringify(formData)], 'form_data.txt', {\n    type: 'text/plain',\n  });\n\n  await sendDataToServer(submitButton, data, file);\n}\n\n/**\n * Event listener for the form submission event.\n * Fetches the reCAPTCHA site key from the config.json file,\n * executes the reCAPTCHA, and then calls the handleSubmit function.\n *\n * @param {Event} event - The submit event triggered by the form.\n * @listens form#submit\n */\nform.addEventListener(\"submit\", (event) => {\n  event.preventDefault();\n\n  // Fetch the reCAPTCHA site key from the config.json file\n  fetch('../config.json')\n    .then(response => response.text())\n    .then(jsonString => {\n      const config = JSON.parse(jsonString);\n\n      // Execute the reCAPTCHA\n      grecaptcha.ready(() => {\n        grecaptcha.execute(config.recaptchaSiteKey, {action: 'submit'})\n          .then((token) => {\n            // If reCAPTCHA token is obtained, call handleSubmit function\n            if (token) {\n              handleSubmit(event, token);\n            } else {\n              // Display an error message if reCAPTCHA token is not obtained\n              displayNotification(\"ReCAPTCHA verification failed. Please try again.\", 'error');\n            }\n          })\n          .catch((error) => {\n            // Log and display an error message if reCAPTCHA execution fails\n            console.error(\"ReCAPTCHA error:\", error);\n            displayNotification(\"ReCAPTCHA verification failed. Please try again.\", 'error');\n          });\n      });\n    })\n    .catch(error => {\n      // Log and display an error message if config.json file loading fails\n      console.error('Error loading config:', error);\n    });\n});\n\n\n/**\n * Validates form data before sending it to the server.\n *\n * @param {Object} formData - Object containing form data.\n *\n * @returns {boolean} - Returns true if form data is valid, false otherwise.\n */\nasync function validateFormData(submitButton, formData) {\n  try {\n    const response = await fetch('../php/validate-data.php', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(formData)\n    });\n\n    const data = await response.json();\n\n    if (data.error) {\n      // Wyświetl błąd na stronie\n      displayNotification(data.error, 'error');\n      setTimeout(() => {\n        init.resetButton();\n      }, 200);\n      throw new Error(data.error); // Rzuć wyjątek w przypadku błędu walidacji\n    } else {\n      // Dane formularza są prawidłowe, możesz kontynuować\n      return true; // Kontynuuj proces\n    }\n  } catch (error) {\n    submitButton.disabled = false;\n    throw error; // Rzuć wyjątek w przypadku błędu\n  }\n}\n\n/**\n * @description Sends form data to a PHP script using the Fetch API. It processes\n * the response, displaying notifications based on the result. It also resets the\n * form after success, re-enables the submit button upon completion, and handles\n * errors gracefully.\n *\n * @param {HTMLElement} submitButton - The form's submit button element.\n * @param {FormData} data - An object containing form data to be sent to the server.\n * @returns {Promise<void>}\n */\n\nasync function sendDataToServer(submitButton, data, file) {\n  try {\n    const response = await fetch('../php/send_email.php', {\n      method: 'POST',\n      body: data,\n    });\n\n    if (!response.ok) {\n      throw new Error(`Błąd ${response.status}: ${response.statusText}`);\n    }\n\n    const result = await response.json();\n  \n    if (result.success) {\n      displayNotification(result.message, 'success');\n      setTimeout(() => {\n        // Calls animateButton with 'success'.\n        init.animateButton('success');\n      }, 0);\n      setTimeout(() => {\n        // Calls form.reset() with a delay.\n        form.reset(); // Reset the form after success\n      }, 5000); // Delaying reset after success message\n    } else {\n      displayNotification(result.message, 'error');\n      setTimeout(() => {\n        // Immediately invokes itself.\n        init.animateButton('error');\n      }, 0);\n    }\n  } catch (error) {\n    console.error(\"Form submission error:\", error.message, error.stack);\n    handleError(file, error);\n  } finally {\n    // Re-enable the submit button\n    submitButton.disabled = false;\n    setTimeout(() => {\n      // Calls `resetButton` after 5 seconds delay.\n      init.resetButton();\n    }, 5000);\n  }\n}\n\n/**\n * Captures and handles errors by reporting them to Sentry and notifying the user.\n *\n * This function utilizes Sentry's `captureException` to log the provided error along with \n * additional context, such as form data and specific tags. It also displays a user-friendly \n * error message to inform the user of the encountered issue.\n *\n * @param {Error} error - The error object to be captured and reported.\n * @param {Object} data - The form data associated with the error (should be defined in the scope).\n * @param {Object} [options] - Optional parameters for additional context.\n * @param {string} options.formName - The name of the form where the error occurred, used for tagging.\n * \n * @tags {Object} tags - Tags to categorize the error.\n * @tags.form-name {string} 'kontakt' - The name of the form that triggered the error, aiding in filtering and analysis.\n */\nfunction handleError(file, error) {\n  Sentry.captureException(error, {\n    attachments: [\n      {\n        filename: 'form_data.txt',\n        data: file,\n        contentType: 'text/plain',\n      },\n    ],  \n    tags: {\n      'form-name': 'kontakt',\n    },\n    extra: {\n      url: window.location.href,\n      referrer: document.referrer,\n      userAgent: navigator.userAgent,\n      formData: file,\n      formMethod: 'POST',\n      formAction: '../php/send_email.php',\n      formError: error.message,\n      formErrorStack: error.stack,\n      formErrorName: error.name,\n      formErrorMessage: error.message,\n    },\n  });\n if (error.message.includes('Błąd')) {\n    displayNotification('Wystąpił błąd. Proszę spróbować ponownie.', 'error');\n  } else {\n    displayNotification('Wystąpił nieoczekiwany błąd. Proszę skontaktować się z administratorem.', 'error');\n  }\n}\n"],"names":["displayNotification","phoneFormatter","initButtonAnimation","form","document","getElementById","init","generateCsfrToken","fetch","then","response","text","csrfToken","localStorage","setItem","value","catch","error","errorData","message","url","method","Sentry","captureException","Error","extra","console","async","handleSubmit","event","token","preventDefault","formData","email","phone","replace","name","submitButton","querySelector","disabled","await","validateFormData","uniqueID","Date","now","Math","floor","random","toString","data","FormData","file","append","File","JSON","stringify","type","sendDataToServer","window","location","href","referrer","userAgent","navigator","formName","formAction","formMethod","headers","Content-Type","body","json","setTimeout","resetButton","ok","status","statusText","result","success","animateButton","reset","stack","handleError","attachments","filename","contentType","tags","form-name","formError","formErrorStack","formErrorName","formErrorMessage","includes","addEventListener","jsonString","config","parse","grecaptcha","ready","execute","recaptchaSiteKey","action"],"mappings":"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"}