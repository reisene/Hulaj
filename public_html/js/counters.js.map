{"version":3,"file":"counters.js","names":["$","document","ready","counterUp","delay","time","initCounters","each","countTo","parseInt","attr","speed","count","increment","$this","counter","setInterval","clearInterval","text","Math","floor","countersInitialized","Set","handleCounters","isElementInView","has","add","handleScroll","window","scroll","element","rect","getBoundingClientRect","top","left","bottom","innerHeight","documentElement","clientHeight","right","innerWidth","clientWidth"],"sources":["counters.js"],"sourcesContent":["/**\n * Initializes and animates counters when they become visible in the viewport.\n * The counters are identified by the 'counter' class and are animated using the 'initCounters' function.\n * The function also handles scroll events to trigger the counter animations.\n */\n$(document).ready(function () {\n \n    // Initializes counter elements with animation upon scrolling or loading.\n    $('.timer').counterUp({\n        delay: 10,\n        time: 1000,\n    });\n\n    /**\n     * @description Initializes and starts a timer on every element with class `timer`.\n     * It sets up an incrementing counter to reach the value specified in `data-to`\n     * attribute, at a speed defined by `data-speed`, updating the element's text display\n     * every 100 milliseconds.\n     */\n    const initCounters = () => {\n        $('.timer').each(function () {\n            // Initializes a timer.\n            \n            var countTo = parseInt($(this).attr('data-to'));\n            var speed = parseInt($(this).attr('data-speed'));\n            var count = 0;\n            var increment = countTo / (speed / 100); // increment per step\n\n            var $this = $(this);\n            var counter = setInterval(function () {\n                // Increments and updates text every second, stopping at a certain value.\n                count += increment;\n                if (count >= countTo) {\n                    count = countTo;\n                    clearInterval(counter);\n                }\n                $this.text(Math.floor(count));\n            }, 100);\n        });\n    };\n\n    const countersInitialized = new Set();\n\n    /**\n     * @description Iterates over elements with class \"counter\". It checks if each element\n     * is visible within the viewport and has not been initialized before, then calls\n     * `initCounters` to initialize it and adds it to a set for tracking initialization\n     * status.\n     */\n    const handleCounters = () => {\n        $('.counter').each(function () {\n            // Checks for elements in view and initializes them if not already initialized.\n            \n            if (isElementInView(this) && !countersInitialized.has(this)) {\n                \n                initCounters();\n                countersInitialized.add(this);\n            }\n        });\n    };\n\n    /**\n     * @description Triggers an execution of the `handleCounters` function every time a\n     * scroll event occurs, enabling dynamic updates to counters or other variables based\n     * on scrolling activity.\n     */\n    const handleScroll = () => {\n        handleCounters();\n    };\n\n    $(window).scroll(handleScroll);\n    handleScroll(); // Initialize scroll animations and counters on load\n});\n\n/**\n * @description Checks if a given HTML element is currently visible within its parent's\n * viewport by comparing its bounding rectangle coordinates to the inner dimensions\n * of the window or document element. It returns true if the element is visible, false\n * otherwise.\n *\n * @param {HTMLElement} element - Checked for visibility within the viewport.\n *\n * @returns {boolean} True if the element is currently visible within the viewport\n * and false otherwise.\n */\nfunction isElementInView(element) {\n    const rect = element.getBoundingClientRect();\n    return (\n        rect.top >= 0 &&\n        rect.left >= 0 &&\n        rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) &&\n        rect.right <= (window.innerWidth || document.documentElement.clientWidth)\n    );\n}"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACAA,CAAC,CAACC,QAAQ,CAAC,CAACC,KAAK,CAAC,YAAY;EAE1B;EACAF,CAAC,CAAC,QAAQ,CAAC,CAACG,SAAS,CAAC;IAClBC,KAAK,EAAE,EAAE;IACTC,IAAI,EAAE;EACV,CAAC,CAAC;;EAEF;AACJ;AACA;AACA;AACA;AACA;EACI,IAAMC,YAAY,GAAG,SAAfA,YAAYA,CAAA,EAAS;IACvBN,CAAC,CAAC,QAAQ,CAAC,CAACO,IAAI,CAAC,YAAY;MACzB;;MAEA,IAAIC,OAAO,GAAGC,QAAQ,CAACT,CAAC,CAAC,IAAI,CAAC,CAACU,IAAI,CAAC,SAAS,CAAC,CAAC;MAC/C,IAAIC,KAAK,GAAGF,QAAQ,CAACT,CAAC,CAAC,IAAI,CAAC,CAACU,IAAI,CAAC,YAAY,CAAC,CAAC;MAChD,IAAIE,KAAK,GAAG,CAAC;MACb,IAAIC,SAAS,GAAGL,OAAO,IAAIG,KAAK,GAAG,GAAG,CAAC,CAAC,CAAC;;MAEzC,IAAIG,KAAK,GAAGd,CAAC,CAAC,IAAI,CAAC;MACnB,IAAIe,OAAO,GAAGC,WAAW,CAAC,YAAY;QAClC;QACAJ,KAAK,IAAIC,SAAS;QAClB,IAAID,KAAK,IAAIJ,OAAO,EAAE;UAClBI,KAAK,GAAGJ,OAAO;UACfS,aAAa,CAACF,OAAO,CAAC;QAC1B;QACAD,KAAK,CAACI,IAAI,CAACC,IAAI,CAACC,KAAK,CAACR,KAAK,CAAC,CAAC;MACjC,CAAC,EAAE,GAAG,CAAC;IACX,CAAC,CAAC;EACN,CAAC;EAED,IAAMS,mBAAmB,GAAG,IAAIC,GAAG,CAAC,CAAC;;EAErC;AACJ;AACA;AACA;AACA;AACA;EACI,IAAMC,cAAc,GAAG,SAAjBA,cAAcA,CAAA,EAAS;IACzBvB,CAAC,CAAC,UAAU,CAAC,CAACO,IAAI,CAAC,YAAY;MAC3B;;MAEA,IAAIiB,eAAe,CAAC,IAAI,CAAC,IAAI,CAACH,mBAAmB,CAACI,GAAG,CAAC,IAAI,CAAC,EAAE;QAEzDnB,YAAY,CAAC,CAAC;QACde,mBAAmB,CAACK,GAAG,CAAC,IAAI,CAAC;MACjC;IACJ,CAAC,CAAC;EACN,CAAC;;EAED;AACJ;AACA;AACA;AACA;EACI,IAAMC,YAAY,GAAG,SAAfA,YAAYA,CAAA,EAAS;IACvBJ,cAAc,CAAC,CAAC;EACpB,CAAC;EAEDvB,CAAC,CAAC4B,MAAM,CAAC,CAACC,MAAM,CAACF,YAAY,CAAC;EAC9BA,YAAY,CAAC,CAAC,CAAC,CAAC;AACpB,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASH,eAAeA,CAACM,OAAO,EAAE;EAC9B,IAAMC,IAAI,GAAGD,OAAO,CAACE,qBAAqB,CAAC,CAAC;EAC5C,OACID,IAAI,CAACE,GAAG,IAAI,CAAC,IACbF,IAAI,CAACG,IAAI,IAAI,CAAC,IACdH,IAAI,CAACI,MAAM,KAAKP,MAAM,CAACQ,WAAW,IAAInC,QAAQ,CAACoC,eAAe,CAACC,YAAY,CAAC,IAC5EP,IAAI,CAACQ,KAAK,KAAKX,MAAM,CAACY,UAAU,IAAIvC,QAAQ,CAACoC,eAAe,CAACI,WAAW,CAAC;AAEjF","ignoreList":[]}