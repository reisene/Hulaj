import{jest}from"@jest/globals";import displayNotification from"../modules/notification";import phoneFormatter from"../modules/phone-format";import initButtonAnimation from"../modules/button-animation";jest.mock("../modules/notification"),jest.mock("../modules/phone-format"),jest.mock("../modules/button-animation"),describe("Form Submission Handler",()=>{let a,o;beforeEach(()=>{(a=document.createElement("form")).id="my-form",(o=document.createElement("button")).type="submit",a.appendChild(o);["email","phone","name","message","csrf-token"].forEach(e=>{var t=document.createElement("input");t.id=e,t.value="test-"+e,a.appendChild(t)}),document.body.appendChild(a),global.fetch=jest.fn(),global.localStorage={getItem:jest.fn(),setItem:jest.fn()}}),afterEach(()=>{document.body.innerHTML="",jest.clearAllMocks()}),test("generateCsfrToken fetches and stores token correctly",async()=>{let e="test-token";global.fetch.mockResolvedValueOnce({text:()=>Promise.resolve(e)}),await generateCsfrToken(),expect(global.fetch).toHaveBeenCalledWith("/php/generate-token.php"),expect(localStorage.setItem).toHaveBeenCalledWith("csrf_token",e),expect(document.getElementById("csrf-token").value).toBe(e)}),test("validateFormData handles validation success",async()=>{global.fetch.mockResolvedValueOnce({json:()=>Promise.resolve({success:!0})});var e=await validateFormData(o,{email:"test@example.com",phone:"123456789",name:"Test User",message:"Test message"});expect(e).toBe(!0)}),test("validateFormData handles validation error",async()=>{global.fetch.mockResolvedValueOnce({json:()=>Promise.resolve({error:"Validation failed"})}),await expect(validateFormData(o,{email:"invalid-email",phone:"",name:"",message:""})).rejects.toThrow("Validation failed"),expect(displayNotification).toHaveBeenCalledWith("Validation failed","error")}),test("sendDataToServer handles successful submission",async()=>{var e=new FormData,t=new File(["{}"],"test.txt");global.fetch.mockResolvedValueOnce({ok:!0,json:()=>Promise.resolve({success:!0,message:"Success"})}),await sendDataToServer(o,e,t),expect(displayNotification).toHaveBeenCalledWith("Success","success"),expect(o.disabled).toBe(!1)}),test("sendDataToServer handles submission error",async()=>{var e=new FormData,t=new File(["{}"],"test.txt");global.fetch.mockRejectedValueOnce(new Error("Network error")),await sendDataToServer(o,e,t),expect(displayNotification).toHaveBeenCalledWith("Wystąpił nieoczekiwany błąd. Proszę skontaktować się z administratorem.","error"),expect(o.disabled).toBe(!1)})});
//# sourceMappingURL=send_email.test.js.map
