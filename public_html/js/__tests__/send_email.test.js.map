{"version":3,"file":"send_email.test.js","sources":["__tests__/send_email.test.js"],"sourcesContent":["import { jest } from \"@jest/globals\";\r\nimport displayNotification from \"../modules/notification\";\r\nimport phoneFormatter from \"../modules/phone-format\";\r\nimport initButtonAnimation from \"../modules/button-animation\";\r\n\r\n// Mock dependencies\r\njest.mock(\"../modules/notification\");\r\njest.mock(\"../modules/phone-format\");\r\njest.mock(\"../modules/button-animation\");\r\n\r\ndescribe(\"Form Submission Handler\", () => {\r\n  let mockForm;\r\n  let mockSubmitButton;\r\n\r\n  beforeEach(() => {\r\n    // Setup DOM elements\r\n    mockForm = document.createElement(\"form\");\r\n    mockForm.id = \"my-form\";\r\n\r\n    mockSubmitButton = document.createElement(\"button\");\r\n    mockSubmitButton.type = \"submit\";\r\n    mockForm.appendChild(mockSubmitButton);\r\n\r\n    // Add form inputs\r\n    const inputs = [\"email\", \"phone\", \"name\", \"message\", \"csrf-token\"];\r\n    inputs.forEach((id) => {\r\n      const input = document.createElement(\"input\");\r\n      input.id = id;\r\n      input.value = `test-${id}`;\r\n      mockForm.appendChild(input);\r\n    });\r\n\r\n    document.body.appendChild(mockForm);\r\n\r\n    // Mock fetch\r\n    global.fetch = jest.fn();\r\n    global.localStorage = {\r\n      getItem: jest.fn(),\r\n      setItem: jest.fn(),\r\n    };\r\n  });\r\n\r\n  afterEach(() => {\r\n    document.body.innerHTML = \"\";\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  test(\"generateCsfrToken fetches and stores token correctly\", async () => {\r\n    const mockToken = \"test-token\";\r\n    global.fetch.mockResolvedValueOnce({\r\n      text: () => Promise.resolve(mockToken),\r\n    });\r\n\r\n    await generateCsfrToken();\r\n\r\n    expect(global.fetch).toHaveBeenCalledWith(\"/php/generate-token.php\");\r\n    expect(localStorage.setItem).toHaveBeenCalledWith(\"csrf_token\", mockToken);\r\n    expect(document.getElementById(\"csrf-token\").value).toBe(mockToken);\r\n  });\r\n\r\n  test(\"validateFormData handles validation success\", async () => {\r\n    const formData = {\r\n      email: \"test@example.com\",\r\n      phone: \"123456789\",\r\n      name: \"Test User\",\r\n      message: \"Test message\",\r\n    };\r\n\r\n    global.fetch.mockResolvedValueOnce({\r\n      json: () => Promise.resolve({ success: true }),\r\n    });\r\n\r\n    const result = await validateFormData(mockSubmitButton, formData);\r\n    expect(result).toBe(true);\r\n  });\r\n\r\n  test(\"validateFormData handles validation error\", async () => {\r\n    const formData = {\r\n      email: \"invalid-email\",\r\n      phone: \"\",\r\n      name: \"\",\r\n      message: \"\",\r\n    };\r\n\r\n    global.fetch.mockResolvedValueOnce({\r\n      json: () => Promise.resolve({ error: \"Validation failed\" }),\r\n    });\r\n\r\n    await expect(validateFormData(mockSubmitButton, formData)).rejects.toThrow(\r\n      \"Validation failed\",\r\n    );\r\n    expect(displayNotification).toHaveBeenCalledWith(\r\n      \"Validation failed\",\r\n      \"error\",\r\n    );\r\n  });\r\n\r\n  test(\"sendDataToServer handles successful submission\", async () => {\r\n    const mockData = new FormData();\r\n    const mockFile = new File([\"{}\"], \"test.txt\");\r\n\r\n    global.fetch.mockResolvedValueOnce({\r\n      ok: true,\r\n      json: () => Promise.resolve({ success: true, message: \"Success\" }),\r\n    });\r\n\r\n    await sendDataToServer(mockSubmitButton, mockData, mockFile);\r\n\r\n    expect(displayNotification).toHaveBeenCalledWith(\"Success\", \"success\");\r\n    expect(mockSubmitButton.disabled).toBe(false);\r\n  });\r\n\r\n  test(\"sendDataToServer handles submission error\", async () => {\r\n    const mockData = new FormData();\r\n    const mockFile = new File([\"{}\"], \"test.txt\");\r\n\r\n    global.fetch.mockRejectedValueOnce(new Error(\"Network error\"));\r\n\r\n    await sendDataToServer(mockSubmitButton, mockData, mockFile);\r\n\r\n    expect(displayNotification).toHaveBeenCalledWith(\r\n      \"Wystąpił nieoczekiwany błąd. Proszę skontaktować się z administratorem.\",\r\n      \"error\",\r\n    );\r\n    expect(mockSubmitButton.disabled).toBe(false);\r\n  });\r\n\r\n  describe(\"getFormData\", () => {\r\n    test(\"returns correctly formatted form data\", () => {\r\n      const formData = getFormData();\r\n      expect(formData).toEqual({\r\n        email: \"test-email\",\r\n        phone: \"test-phone\",\r\n        name: \"test-name\",\r\n        message: \"test-message\",\r\n      });\r\n    });\r\n\r\n    test(\"strips non-digits from phone number\", () => {\r\n      document.getElementById(\"phone\").value = \"+1 (234) 567-8900\";\r\n      const formData = getFormData();\r\n      expect(formData.phone).toBe(\"12345678900\");\r\n    });\r\n  });\r\n\r\n  describe(\"prepareData\", () => {\r\n    test(\"creates FormData with all required fields\", () => {\r\n      const formData = {\r\n        email: \"test@example.com\",\r\n        phone: \"123456789\",\r\n        name: \"Test User\",\r\n        message: \"Test message\",\r\n      };\r\n      const token = \"test-token\";\r\n\r\n      const result = prepareData(formData, token);\r\n\r\n      expect(result instanceof FormData).toBe(true);\r\n      expect(result.get(\"email\")).toBe(formData.email);\r\n      expect(result.get(\"phone\")).toBe(formData.phone);\r\n      expect(result.get(\"name\")).toBe(formData.name);\r\n      expect(result.get(\"message\")).toBe(formData.message);\r\n      expect(result.get(\"g-recaptcha-response\")).toBe(token);\r\n      expect(result.get(\"csrf_token\")).toBeDefined();\r\n      expect(result.get(\"uniqueID\")).toBeDefined();\r\n    });\r\n  });\r\n\r\n  describe(\"handleError\", () => {\r\n    beforeEach(() => {\r\n      global.Sentry = {\r\n        captureException: jest.fn(),\r\n      };\r\n    });\r\n\r\n    test(\"captures exception with correct data\", () => {\r\n      const mockFile = new File([\"{}\"], \"test.txt\");\r\n      const mockError = new Error(\"Test error\");\r\n\r\n      handleError(mockFile, mockError);\r\n\r\n      expect(Sentry.captureException).toHaveBeenCalledWith(\r\n        mockError,\r\n        expect.objectContaining({\r\n          tags: { \"form-name\": \"kontakt\" },\r\n          attachments: expect.arrayContaining([\r\n            expect.objectContaining({\r\n              filename: \"form_data.txt\",\r\n              contentType: \"text/plain\",\r\n            }),\r\n          ]),\r\n        }),\r\n      );\r\n    });\r\n\r\n    test(\"displays correct error message for known errors\", () => {\r\n      const mockFile = new File([\"{}\"], \"test.txt\");\r\n      const mockError = new Error(\"Błąd 404\");\r\n\r\n      handleError(mockFile, mockError);\r\n\r\n      expect(displayNotification).toHaveBeenCalledWith(\r\n        \"Wystąpił błąd. Proszę spróbować ponownie.\",\r\n        \"error\",\r\n      );\r\n    });\r\n\r\n    test(\"displays generic error message for unknown errors\", () => {\r\n      const mockFile = new File([\"{}\"], \"test.txt\");\r\n      const mockError = new Error(\"Unknown error\");\r\n\r\n      handleError(mockFile, mockError);\r\n\r\n      expect(displayNotification).toHaveBeenCalledWith(\r\n        \"Wystąpił nieoczekiwany błąd. Proszę skontaktować się z administratorem.\",\r\n        \"error\",\r\n      );\r\n    });\r\n  });\r\n});\r\n"],"names":["jest","displayNotification","phoneFormatter","initButtonAnimation","mock","describe","let","mockForm","mockSubmitButton","beforeEach","document","createElement","id","type","appendChild","forEach","input","value","body","global","fetch","fn","localStorage","getItem","setItem","afterEach","innerHTML","clearAllMocks","test","async","mockToken","mockResolvedValueOnce","text","Promise","resolve","await","generateCsfrToken","expect","toHaveBeenCalledWith","getElementById","toBe","json","success","result","validateFormData","email","phone","name","message","error","rejects","toThrow","mockData","FormData","mockFile","File","ok","sendDataToServer","disabled","mockRejectedValueOnce","Error","formData","getFormData","toEqual","token","prepareData","get","toBeDefined","Sentry","captureException","mockError","handleError","objectContaining","tags","form-name","attachments","arrayContaining","filename","contentType"],"mappings":"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"}